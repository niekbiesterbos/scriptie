[
  {
    "day": 1,
    "strategy": "GreedyAlgorithm",
    "part1": "import numpy as np\n\n\ndef get_total_calories_of_top_three_elves_carrying_most_calories(inventory_list: str) -> list:\n    total_calories_of_all_elves = []\n\n    for individual_calories_of_this_elf in inventory_list.split(\"\\n\\n\"):\n        total_calories_of_this_elf = np.fromstring(individual_calories_of_this_elf, dtype=np.int_, sep=\"\\n\").sum()\n        total_calories_of_all_elves.append(total_calories_of_this_elf)\n\n    total_calories_of_all_elves.sort()\n    return total_calories_of_all_elves[-3:]\n\n\ndef get_input(file: str) -> str:\n    with open(file, \"r\") as f:\n        return f.read()\n\n\nif __name__ == '__main__':\n    print(\"\\n======================\")\n    content = get_input(\"day1/input.txt\")\n    calories_of_top_three_elves = get_total_calories_of_top_three_elves_carrying_most_calories(content)\n\n    print(f\"\\nREAL INPUT\\n\")\n    print(f\"--> Part 1: The NÂ°1 Elf is carrying {max(calories_of_top_three_elves)} Calories in total.\")\n    print(f\"--> Part 2: The TOP 3 Elves are carrying {sum(calories_of_top_three_elves)} Calories in total.\")\n\n    print(\"\\n======================\\n\")"
  },
  {
    "day": 2,
    "strategy": "None",
    "part1": "def day2(s, part2=False):  \n  total = 0  \n  for line in s.strip('\\n').split('\\n'):  \n    i, j = ord(line[0]) - ord('A'), ord(line[2]) - ord('X')  \n    total += (j * 3 + (i + j + 2) % 3 + 1 if part2 else\n              (j - i + 1) % 3 * 3 + j + 1)\n  return total"
  },
  {
    "day": 3,
    "strategy": "None",
    "part1": "lines = open(\"inputs/3.txt\").read().strip().split(\"\\n\")\n\ndef getVal(x):\n    return ord(x) - ord('a') + 1 if x.islower() else ord(x) - ord('A') + 27\n\np1 = 0\nfor line in lines:\n    m = len(line) // 2\n    x, = set(line[:m]) & set(line[m:])\n    p1 += getVal(x)\n\np2 = 0\nfor i in range(0, len(lines), 3):\n    line1, line2, line3 = lines[i:i+3]\n    x, = set(line1) & set(line2) & set(line3)\n    p2 += getVal(x)\nprint(\"Part1\", p1)\nprint(\"Part2\", p2)"
  },
  {
    "day": 4,
    "strategy": "None",
    "part1": "tasks = [[*map(int, s.replace(\"-\", \",\").split(\",\"))] \n    for s in open(\"input.txt\").read().split()]\n\ndef part1(tasks):\n    return sum([((a<=c<=d<=b) or (c<=a<=b<=d)) \n        for a,b,c,d in tasks])\ndef part2(tasks):\n    return sum([((a<=c<=b) or (c<=a<=d))\n        for a,b,c,d in tasks])"
  },
  {
    "day": 5,
    "strategy": "None",
    "part1": "print(\"Part 1:\", \"\".join(s[0] for s in p1 if s))\nprint(\"Part 2:\", \"\".join(s[0] for s in p2 if s))"
  },
  {
    "day": 6,
    "strategy": "None",
    "part1": "def f(n, x=input()):\n    return next(i+n for i in range(len(x))\n        if len(set(x[i:i+n]))==n)\n\nprint(*map(f, (4, 14)))"
  },
  {
    "day": 7,
    "strategy": "None",
    "part1": "def day7(s, part2=False):\n  stack, sizes = [], []\n  for line in s.splitlines():\n    if line == '$ cd ..':\n      size = stack.pop()\n      sizes.append(size)\n      stack[-1] += size\n    elif line.startswith('$ cd '):\n      stack.append(0)\n    elif line[0].isdigit():\n      stack[-1] += int(line.split()[0])\n  sizes.extend(itertools.accumulate(stack[::-1]))\n  return (sum(s for s in sizes if s <= 100_000) if not part2 else\n          min(s for s in sizes if s >= max(sizes) - 40_000_000))"
  },
  {
    "day": 8,
    "strategy": "None",
    "part1": "import aoc_lube\nfrom aoc_lube.utils import int_grid\n\nimport numpy as np\nimport cv2\n\ntrees = int_grid(aoc_lube.fetch(year=2022, day=8)).astype(np.uint8)\nKERNEL = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 0]], np.uint8)\n\ndef part_one():\n    visible = np.zeros_like(trees, dtype=bool)\n    visible[[0, -1]] = visible[:, [0, -1]] = True\n\n    for i in range(4):\n        tc = np.rot90(trees, i)\n        while True:\n            dilated = cv2.dilate(tc, KERNEL)\n            if np.array_equal(tc, dilated):\n                break\n            tc = dilated\n\n        tc[1:] -= tc[:-1]\n\n        np.rot90(visible, i)[tc.nonzero()] = True\n\n    return visible.sum()"
  },
  {
    "day": 9,
    "strategy": "None",
    "part1": "import sys \n\ndef move(f):\n    x = y = 0 \n    for line in f:\n        direction, distance = line.split()\n        for _ in range(int(distance)):\n            x += (direction == 'R') - (direction == 'L')\n            y += (direction == 'U') - (direction == 'D')\n            yield x, y\n\ndef follow(head):\n    x = y = 0 \n    for hx, hy in head:\n        if abs(hx - x) > 1 or abs(hy - y) > 1:\n            y += (hy > y) - (hy < y)\n            x += (hx > x) - (hx < x)\n        yield x, y\n\ntenth = second = list(follow(move(sys.stdin)))\nfor _ in range(8):\n    tenth = follow(tenth)\nprint(len(set(second)))\nprint(len(set(tenth)))"
  },
  {
    "day": 10,
    "strategy": "None",
    "part1": "ll = [x for x in open(inf).read().strip().split('\\n')]\n\nx = 1\ncnt = 0\nsm = 0\ncrt = [[\" \" for x in range(40)] for y in range(6)]\ndef cycle():\n\tglobal cnt, sm, x\n\tcnt += 1\n\tif cnt == 20 or cnt == 60 or cnt == 100 or cnt == 140 or cnt == 180 or cnt == 220:\n\t\tsm += cnt * x\n\tif abs((cnt-1)%40-x) < 2:\n\t\tcrt[(cnt-1)//40][(cnt-1)%40] = \"#\"\nfor line in ll:\n\tif line == \"noop\":\n\t\tcycle()\n\telse:\n\t\tadd = int(line[5:])\n\t\tcycle()\n\t\tcycle()\n\t\tx += add\nprint(sm)\nfor line in crt:\n\tprint(\"\".join(line))"
  },
  {
    "day": 11,
    "strategy": "None",
    "part1": "def solve(blocks, tot_rounds, extra_op = ''):\n    monkeys = [([int(i) for i in start.split(\", \")],        # Objects\n                op_str.split(' = ')[1],                     # Operation\n                [int(t.split()[-1]) for t in test_args])    # Test args\n    for start, op_str, *test_args in blocks]\n        \n    # Perform all operations modulo [prod of all test values]:\n    extra_op += f\" % {np.prod([m[2][0] for m in monkeys])}\"\n    \n    op = lambda op_str, old: eval(f\"({op_str}){extra_op}\")\n    test = lambda div_by, t, f, val: f if val%div_by else t\n\n    inspections = [0]*len(monkeys)\n\n    for _ in range(tot_rounds):\n        for i, (objects, op_str, test_args) in enumerate(monkeys):\n            inspections[i] += len(objects)\n            for obj in objects:\n                obj = op(op_str, obj)\n                monkeys[test(*test_args, obj)][0].append(obj)\n            objects[:] = []\n                \n    return np.prod(sorted(inspections)[-2:])\n\nblocks = [[l.split(': ')[1] \n        for l in block.split(\"\\n\")[1:]] for block in data.split(\"\\n\\n\")]\n\nprint(\"Part 1:\", solve(blocks, tot_rounds = 20, extra_op = ' // 3'))\nprint(\"Part 2:\", solve(blocks, tot_rounds = 10000))"
  },
  {
    "day": 12,
    "strategy": "GraphTraversal",
    "part1": "def bfs(start):\n    queue, seen = [[start]], {start}\n    while queue:\n        path = queue.pop(0)\n        i, j = path[-1]\n        if m[i][j] == \"E\":\n            return path\n        for x, y in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if 0 <= x < len(m) and 0 <= y < len(m[0]) and f(m[x][y]) - f(m[i][j]) < 2 and (x, y) not in seen:\n                queue.append(path + [(x, y)])\n                seen.add((x, y))\n\n\nm = [list(x.strip()) for x in open('data.in').readlines()]\nf = lambda x: ord(x) if x not in 'SE' else ord('a') if x == 'S' else ord('z')\nfor part in ['S', 'aS']:\n    starts = [(i, j) for j in range(len(m[0])) for i in range(len(m)) if m[i][j] in part]\n    print(min(len(path) - 1 for s in starts if (path := bfs(s)) is not None))"
  },
  {
    "day": 13,
    "strategy": "Recursion",
    "part1": "def in_order(l1, l2):\n    if isinstance(l1, int) and isinstance(l2, int):\n        if l1 == l2:\n            return None\n        return l1 < l2\n\n    if isinstance(l1, list) and isinstance(l2, list):\n        for e1, e2 in zip(l1, l2):\n            if (comparison := in_order(e1, e2)) is not None:\n                return comparison\n        return in_order(len(l1), len(l2))\n\n    if isinstance(l1, int):\n        return in_order([l1], l2)\n    return in_order(l1, [l2])\n\n\ntext = open(\"inputs/13\", \"r\").read()\npairs = [[eval(l) for l in pair.splitlines()]for pair in text.strip().split(\"\\n\\n\")]\nprint(sum(i for i, (left, right) in enumerate(pairs, 1) if in_order(left, right)))\n\npackets = [p for pair in pairs for p in pair]\nposition_1 = 1 + sum(1 for p in packets if in_order(p, [[2]]))\nposition_2 = 2 + sum(1 for p in packets if in_order(p, [[6]]))\nprint(position_1 * position_2)"
  },
  {
    "day": 14,
    "strategy": "GreedyAlgorithm",
    "part1": "from collections import defaultdict\n\ndef fall(grid, current, queue, end, p1=None, grains=0):\n    while True:\n        x,y = current\n        (e, nxt) = next(((e, z - 1) for e, z in enumerate(grid[x]) if z > y))\n        if x - 1 in grid and nxt + 1 in grid[x - 1]:\n            if x + 1 in grid and nxt + 1 in grid[x + 1]:\n                grid[x].insert(e, nxt)\n                grains += 1\n                if not p1 and nxt == end - 1:\n                    p1 = grains - 1\n                elif nxt == 0:\n                    return p1, grains\n                c, current = next((((i, (x, y))) for i, (x, y) in enumerate(queue) if x in grid and y not in grid[x]))\n                queue = queue[c:]\n                continue\n            current = (x + 1, nxt + 1)\n        else:\n            current = (x - 1, nxt + 1)\n        queue.insert(0, (x, nxt))\n\nwith open(\"day_14.txt\", \"r\") as file:\n    data = [[(int((z := y.split(\",\"))[0]), int(z[1])) for y in x.split(\" -> \")] for x in file.read().splitlines()]\n    grid = defaultdict(list)\n    for rock in data:\n        current = rock[0]\n        for nxt in rock[1:]:\n            for y in range(min(current[1], nxt[1]), max(current[1], nxt[1]) + 1):\n                for x in range(min(current[0], nxt[0]), max(current[0], nxt[0]) + 1):\n                    grid[x].append(y)\n                    current = nxt\n    mx = max(sum(grid.values(), [])) + 2\n    grid = defaultdict(lambda: [mx], grid)\n    for x in range(500 - mx - 1, 500 + mx + 2):\n        grid[x].append(mx)\n    print(\"day 14: \", fall({k : sorted(set(v)) for k, v in grid.items()}, (500, 0), [(500, 0)], mx))"
  },
  {
    "day": 15,
    "strategy": "None",
    "part1": "import re\ndef all_numbers(s): return [int(d) for d in re.findall(\"(-?\\d+)\", s)]\ndef md(p, q): return abs(p[0]-q[0])+abs(p[1]-q[1])\n\ndata = [all_numbers(line) for line in input_data.split(\"\\n\")]\nradius = {(a,b):md((a,b),(c,d)) for (a,b,c,d) in data}\nscanners = radius.keys()\n\nacoeffs, bcoeffs = set(), set()\nfor ((x,y), r) in radius.items():\n    acoeffs.add(y-x+r+1)\n    acoeffs.add(y-x-r-1)\n    bcoeffs.add(x+y+r+1)\n    bcoeffs.add(x+y-r-1)\n\nbound = 4_000_000\nfor a in acoeffs:\n    for b in bcoeffs:\n        p = ((b-a)//2, (a+b)//2)\n        if all(0<c<bound for c in p):\n            if all(md(p,t)>radius[t] for t in scanners):\n                print(4_000_000*p[0]+p[1])"
  },
  {
    "day": 16,
    "strategy": "Recursion",
    "part1": "def search(t, u='AA', vs=frozenset(F), e=False):\n    return max([F[v] * (t-D[u,v]-1) + search(t-D[u,v]-1, v, vs-{v}, e)\n           for v in vs if D[u,v]<t] + [search(26, vs=vs) if e else 0])\n\nprint(search(30), search(26, e=True))"
  },
  {
    "day": 17,
    "strategy": "None",
    "part1": "# period starts at t1\n# delta height between 2 periods is\n# dH = delta_heights[:t2].sum() - delta_heights[:t1].sum()\n\ndef height(t):\n    d, m = map(int, divmod(t - t1, period_size))    \n    return (\n        delta_heights[:t1].sum()           # before period\n        + d * dH                           # full periods\n        + delta_heights[t1 : t1 + m].sum() # remaining\n    )"
  },
  {
    "day": 18,
    "strategy": "GraphTraversal",
    "part1": "from time import perf_counter as pfc\nfrom itertools import combinations\n\n\ndef read_puzzle(file):\n  with open(file) as f:\n    return [tuple(map(int, line.split(','))) for line in f.readlines()]\n\n\ndef are_neighbors(a,b):\n  return sum(abs(d1-d2) for d1,d2 in zip(a,b)) == 1\n\n\ndef get_neighbors(point, minv, maxv):\n  candidates = set()\n  for delta in [(-1,0,0), (1,0,0), (0,-1,0), (0,1,0), (0,0,-1), (0,0,1)]:\n    new_point = tuple([d+offset for d,offset in zip(point,delta)])\n    if not all([d >= minv and d <= maxv for d in new_point]): continue\n    candidates.add(new_point)\n  return candidates     \n\n\ndef solve(puzzle):\n  part1 = 6 * len(puzzle)\n  for a,b in combinations(puzzle, 2):\n    if not are_neighbors(a,b): continue\n    part1 -= 2\n\n  \n  part2 = 0\n  puzzle = set(puzzle)\n  minv = min(min(point) for point in puzzle) -1\n  maxv = max(max(point) for point in puzzle) +1\n  nodes = [(minv, minv, minv)]\n  visited = {nodes[0]}\n  while nodes:\n    node = nodes.pop()\n    for neighbor in get_neighbors(node, minv, maxv):\n      if neighbor in visited: continue\n      if neighbor in puzzle: part2 += 1\n      else:\n        visited.add(neighbor)\n        nodes.append(neighbor)  \n\n  return part1, part2\n\n\ntime_start = pfc()\nprint(solve(read_puzzle('Tag18.txt')))\nprint(pfc()-time_start)"
  },
  {
    "day": 19,
    "strategy": "None",
    "part1": "def maximize(blueprint, time=24):\n    model = cp_model.CpModel()\n    \n    # Initial state of no resources and a single robot\n    states = [(np.array([1, 0, 0, 0]), np.array([0, 0, 0, 0]))]\n\n    for t in range(time):\n        robots, inventory = states[-1]\n        build = np.array(\n            [\n                model.NewIntVar(0, 1, f\"{r}-{t}\")\n                for r in (\"ore\", \"clay\", \"obsidian\", \"geode\")\n            ]\n        )\n        # We can build only 1 robot per minute\n        model.Add(sum(build) <= 1)\n        cost = (blueprint * build).sum(axis=1)\n        inventory = inventory - cost\n        for i in inventory:\n            model.Add(i >= 0)\n        states.append((robots + build, inventory + robots))\n    \n    model.Maximize(states[-1][-1][-1])\n    solver = cp_model.CpSolver()\n    res = solver.Solve(model)\n    assert cp_model.OPTIMAL == res, solver.StatusName(res)\n    \n    return solver.ObjectiveValue()"
  },
  {
    "day": 20,
    "strategy": "None",
    "part1": "def read_input():\n    with open(r\"2022\\puzzle20.txt\") as f:\n        return list(enumerate(map(int, f.read().splitlines())))\n\ndef index_of_zero(number_list):\n    for i in range(len(number_list)):\n        if number_list[i][1] == 0:\n            return i\n\ndef mix(mix_count=1, multiplier=1):\n    number_list = read_input()\n    list_size = len(number_list)\n\n    number_list = [(i, n * multiplier) for i, n in number_list]\n\n    for _ in range(mix_count):\n        for i in range(list_size):\n            for j in range(list_size):\n                if number_list[j][0] == i:\n                    num = number_list[j]\n                    number_list.pop(j)\n                    if num[1] == -j:\n                        number_list.append(num)\n                    else:\n                        number_list.insert((j + num[1]) % (list_size-1), num)\n                    break\n\n    zi = index_of_zero(number_list)\n    return sum(number_list[(zi + i) % len(number_list)][1] for i in range(1000, 4000, 1000))\n\nprint(\"Part 1:\", mix())\nprint(\"Part 2:\", mix(10, 811589153))"
  },
  {
    "day": 21,
    "strategy": "Recursion",
    "part1": "def solve(e):\n    actions = m[e]\n    if len(actions) == 1:\n        return actions[0]\n\n    a, op, b = actions\n    return \"(\" + solve(a) + op + solve(b) + \")\"\n\n\nm = {\n    monkey: actions.split(\" \")\n    for line in open(0).read().splitlines()\n    for monkey, actions in [line.split(\": \")]\n}\n\nprint(int(eval(solve(\"root\"))))\n\n# Kudos to https://www.reddit.com/r/adventofcode/comments/zrav4h/comment/j133ko6/\nm[\"humn\"], m[\"root\"][1] = [\"-1j\"], \"-(\"\nc = eval(solve(\"root\") + \")\")\nprint(int(c.real / c.imag))"
  },
  {
    "day": 22,
    "strategy": "GreedyAlgorithm",
    "part1": "directions = {\n    0 : lambda g, d, s, j, x, y : (d, z) if (z := (x + 1, y)) in g else (j[divmod(z[0], s), z[1] // s](s, x, y) if j else (d, min(g, key=lambda a: (abs(a[1] - y), a[0])))),\n    1 : lambda g, d, s, j, x, y : (d, z) if (z := (x, y + 1)) in g else (j[z[0] // s, divmod(z[1], s)](s, x, y) if j else (d, min(g, key=lambda a: (abs(a[0] - x), a[1])))),\n    2 : lambda g, d, s, j, x, y : (d, z) if (z := (x - 1, y)) in g else (j[divmod(z[0], s), z[1] // s](s, x, y) if j else (d, min(g, key=lambda a: (abs(a[1] - y), -a[0])))),\n    3 : lambda g, d, s, j, x, y : (d, z) if (z := (x, y - 1)) in g else (j[z[0] // s, divmod(z[1], s)](s, x, y) if j else (d, min(g, key=lambda a: (abs(a[0] - x), -a[1]))))\n}\n\nget_jumps = lambda size : {\n    ((3, 0), 0) :           lambda s, x, y : (2, (2 * s - 1, (3 * s) - 1 - y)),             #A to H  \n    (2, (-1, size - 1)) :   lambda s, x, y : (3, (x % s, (4 * s) - 1)),                     #D to M            ------ ------\n    (2, (1, 0)) :           lambda s, x, y : (2, ((s * 2) - 1, s + (x % s))),               #E to F           |   B  |  D   |\n    (1, (-1, size - 1)) :   lambda s, x, y : (0, (0, (s * 3) + (x % s))),                   #B to N           |C     |  E  A|\n    ((0, size - 1), 0) :    lambda s, x, y : (0, (0, (s * 3) - 1 - y)),                     #C to K            ------ ------\n    ((0, size - 1), 1) :    lambda s, x, y : (1, ((y % s), s * 2)),                         #G to J           |     F|\n    ((2, 0), 1) :           lambda s, x, y : (3, ((s * 2) + (y % s), s - 1)),               #F to E           |G     |\n    (0, (1, size - 1)) :    lambda s, x, y : (0, (s, s + x)),                               #J to G     ------ ------\n    ((-1, size - 1), 2) :   lambda s, x, y : (0, (s, s - 1 - (y % s))),                     #K to C    |   J  |     H|\n    ((-1, size - 1), 3) :   lambda s, x, y : (1, (s + y % s, 0)),                           #N to B    |K     |  I   |\n    (0, (4, 0)) :           lambda s, x, y : (1, (s * 2 + x, 0)),                           #M to D     ------ ------   \n    ((1, 0), 3) :           lambda s, x, y : (3, (s + (y % s), s * 3 - 1)),                 #L to I    |N    L|\n    (1, (3, 0)) :           lambda s, x, y : (2, (s - 1, s * 3 + (x % s))),                 #I to L    |   M  |\n    ((2, 0), 2) :           lambda s, x, y : (2, (s * 3 - 1, s - 1 - (y % s)))              #H to A     ------\n}\n\ndef walk(instructions, grid, direction, size, current, jump=None):\n    while instructions:\n        instruction = instructions[:(i := next((e for e, x in enumerate(instructions) if x.isalpha()), len(instructions))) + 1]\n        instructions = instructions[i + 1:]\n        steps, turn = '', ''\n        for x in instruction:\n            steps, turn = (steps + x, turn) if x.isdigit() else (steps, x)\n        if steps:\n            for _ in range(int(steps)):\n                if grid[(nxt := directions[direction](grid, direction, size, jump, *current))[1]] != \"#\":\n                    direction, current = nxt\n                else:\n                    break\n        if turn:\n            direction = (direction + (1 if turn == \"R\" else -1)) % 4\n    return 1000 * (current[1] + 1) + 4 * (current[0] + 1) + next((e for e, x in enumerate(directions) if direction == x))\n\nwith open(\"Day_22.txt\", \"r\") as file:\n    data, instructions = file.read().split(\"\\n\\n\")\n    data = data.splitlines()\n    size = min(len(x.replace(\" \", \"\")) for x in data)\n    grid = {(x, y) : data[y][x] for x in range(max(len(x) for x in data)) for y in range(len(data)) if x < len(data[y]) and data[y][x] != \" \"}\n    current = min(grid, key=lambda x: (x[1], x[0]))\n    print(\"day 22: \", walk(instructions[:], grid, 0, size, current), walk(instructions[:], grid, 0, size, current, get_jumps(size)))"
  },
  {
    "day": 23,
    "strategy": "GreedyAlgorithm",
    "part1": "from itertools import cycle\nfrom collections import defaultdict\n\ndef read_input():\n    with open (r'2022\\puzzle23.txt') as f:\n        return set((x,y) for y, l in enumerate(f.readlines()) for x, c in enumerate(l) if c == '#')\n\ndef move_elves(elves, first_direction):\n    proposals = defaultdict(list)\n    start_facing = next(first_direction)\n\n    for elf in elves:\n        if not any((elf[0] + looking[0], elf[1] + looking[1]) in elves for looking in omni_elf):\n            continue\n\n        for i in range(4):\n            crowded = False\n            for direction in directions[(start_facing + i) % 4]:\n                if (elf[0] + direction[0], elf[1] + direction[1]) in elves:\n                    crowded = True\n                    break\n            if not crowded:\n                direction = directions[(start_facing + i) % 4][1]\n                proposals[(elf[0] + direction[0], elf[1] + direction[1])].append(elf)\n                break\n    \n    for proposal in proposals:\n        if len(proposals[proposal]) == 1:\n            elves.remove(proposals[proposal][0])\n            elves.add(proposal)\n    \n    return len(proposals) == 0\n\ndef solve_part_1():\n    elves = read_input()\n    first_direction = cycle(range(4))\n\n    for _ in range(10):\n        move_elves(elves, first_direction)\n    \n    min_x = min(elves, key=lambda x: x[0])[0]\n    max_x = max(elves, key=lambda x: x[0])[0]\n    min_y = min(elves, key=lambda x: x[1])[1]\n    max_y = max(elves, key=lambda x: x[1])[1]\n    \n    return sum((x, y) not in elves for y in range(min_y, max_y + 1) for x in range(min_x, max_x + 1))\n\ndef solve_part_2():\n    elves = read_input()\n    first_direction = cycle(range(4))\n\n    round = 0\n    while True:\n        round += 1\n        if move_elves(elves, first_direction):\n            break\n    \n    return round\n\ndirections = [[(-1, -1), (0, -1), (1, -1)], [(1, 1), (0, 1), (-1, 1)], [(-1, 1), (-1, 0), (-1, -1)], [(1, -1), (1, 0), (1, 1)]]\nomni_elf = [(-1,-1), (0,-1), (1,-1), (1,1), (0,1), (-1,1), (-1,0), (1,0)]\n\nprint (\"Part 1:\", solve_part_1())\nprint (\"Part 2:\", solve_part_2())"
  },
  {
    "day": 24,
    "strategy": "None",
    "part1": "def solve(start, stop, step):\n    positions = set([start])\n\n    while True:\n        next_positions = set()\n        for r, c in positions:\n            for x, y in ((r, c), (r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                if (x, y) == stop:\n                    return step\n                # fmt:off\n                if 0 <= x < height and 0 <= y < width \\\n                   and grid[x][(y - step) % width] != \">\" \\\n                   and grid[x][(y + step) % width] != \"<\" \\\n                   and grid[(x - step) % height][y] != \"v\" \\\n                   and grid[(x + step) % height][y] != \"^\":\n                    next_positions.add((x, y))\n                # fmt:on\n        positions = next_positions\n        if not positions:\n            positions.add(start)\n        step += 1\n\n\ngrid = [row[1:-1] for row in open(0).read().splitlines()[1:-1]]\nheight, width = len(grid), len(grid[0])\nstart, stop = (-1, 0), (height, width - 1)\n\nprint(s1 := solve(start, stop, 1))\nprint(solve(start, stop, solve(stop, start, s1)))"
  },
  {
    "day": 25,
    "strategy": "None",
    "part1": "f = lambda s: f(s[:-1])*5 + '=-012'.find(s[-1])-2 if s else 0\ng = lambda d: g((d+2)//5) + '=-012'[(d+2)%5] if d else ''\n\nprint(g(sum(map(f, open('data.txt').read().split()))))"
  }
]